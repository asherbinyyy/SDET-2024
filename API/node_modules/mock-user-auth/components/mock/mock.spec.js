"use strict";

var _chai = _interopRequireDefault(require("chai"));

var _chaiHttp = _interopRequireDefault(require("chai-http"));

var _mock = _interopRequireDefault(require("./mock"));

var _www = require("../../bin/www");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

process.env.NODE_ENV = 'test';
var assert = _chai["default"].assert;
var expect = _chai["default"].expect;
var user = {
  name: 'user',
  email: 'user@test.com',
  password: 'user123'
};

var userPost = function userPost(bool) {
  _mock["default"].controller.postUser('controller', 'controller@test.com', 'controller123', 'https://').then(function (res) {
    expect(res.status).to.be.an('boolean');
    expect(res.status).to.equal(bool);
  });
};

describe('Mock Module', function () {
  it('It should be a module', function () {
    assert.typeOf(_mock["default"], 'Object');
  });
  it('It should be a express router function ', function () {
    assert.typeOf(_mock["default"].api, 'function');
  });
  it('It should be a object ', function () {
    assert.typeOf(_mock["default"].controller, 'Object');
  });
});
describe('Mock Controller', function () {
  describe('IsAuthenticated Function', function () {
    it('It should check the function return ', function () {
      _mock["default"].controller.isAuthenticated(user.email, user.password).then(function (res) {
        expect(res.status).to.be.an('boolean');
      });
    });
  });
  describe('Delete All Users Function', function () {
    it('It should delete all users', function () {
      _mock["default"].controller.deleteAllUsers().then(function (res) {
        expect(res).to.equal(true);
      });
    });
  });
  describe('PostUser Function', function () {
    it('It should insert a new user', function () {
      userPost(true);
    });
    it('It should block the insertion of existent user', function () {
      userPost(false);
    });
  });
});

_chai["default"].use(_chaiHttp["default"]);

var deleteAllUsersRequest = function deleteAllUsersRequest(key, code) {
  _chai["default"].request(_www.server)["delete"]('/api/v1/all-users').send({
    key_admin: key
  }).end(function (err, res) {
    expect(res.status).to.equal(code);
  });
};

var userPostRequest = function userPostRequest(code, message) {
  _chai["default"].request(_www.server).post('/api/v1/users').send(user).end(function (err, res) {
    expect(res.status).to.equal(code);
    expect(res.body).to.be.an('Object');
    expect(res.body.message).to.be.equal(message);
  });
};

var userAuthRequest = function userAuthRequest(code, data) {
  _chai["default"].request(_www.server).post('/api/v1/auth').send(data).end(function (err, res) {
    expect(res.status).to.equal(code);
    expect(res.body).to.be.an('Object');
  });
};

var userGetRequest = function userGetRequest(code, data) {
  _chai["default"].request(_www.server).get('/api/v1/users').set('Authorization', data).end(function (err, res) {
    expect(res.body).to.be.an('Object');
    expect(res.body).to.be.not.empty;
    expect(res.status).to.equal(code);
  });
};

var userDeleteRequest = function userDeleteRequest(code, token) {
  _chai["default"].request(_www.server)["delete"]('/api/v1/users').set('Authorization', token).end(function (err, res) {
    expect(res.status).to.equal(code);
  });
};

var userPatchRequest = function userPatchRequest(code, token, body) {
  _chai["default"].request(_www.server).patch('/api/v1/users').set('Authorization', token, body).end(function (err, res) {
    expect(res.status).to.equal(code);
    expect(res.body).to.be.an('Object');
    expect(res.body).to.be.not.empty;
  });
};

var retriveUserToken =
/*#__PURE__*/
function () {
  var _ref = _asyncToGenerator(
  /*#__PURE__*/
  regeneratorRuntime.mark(function _callee() {
    var token;
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return userPostRequest(200, 'User registered with success');

          case 2:
            _context.next = 4;
            return _chai["default"].request(_www.server).post('/api/v1/auth').send(user).then(function (res) {
              token = res.body.token;
            })["catch"](function (err) {
              throw err;
            });

          case 4:
            return _context.abrupt("return", token);

          case 5:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));

  return function retriveUserToken() {
    return _ref.apply(this, arguments);
  };
}();

describe('Mock Api', function () {
  describe('/DELETE Users 200', function () {
    it('It should delete all users', function () {
      deleteAllUsersRequest('keyadmin123', 200);
    });
  });
  describe('/DELETE Users 403', function () {
    it('It should not delete all users', function () {
      deleteAllUsersRequest('wrongpassword', 403);
    });
  });
  describe('/POST User 200', function () {
    it('It should create a new user', function () {
      userPostRequest(200, 'User registered with success');
    });
  });
  describe('/POST User 401', function () {
    it('It should not create a new user', function () {
      userPostRequest(401, 'User already registered');
    });
  });
  describe('/Auth User 200', function () {
    after(function () {
      deleteAllUsersRequest('keyadmin123', 200);
    });
    it('It should authenticate user', function () {
      userAuthRequest(200, user);
    });
  });
  describe('/Auth User 401', function () {
    it("It shouldn't authenticate user", function () {
      userAuthRequest(401, {
        name: 'user',
        email: 'user@test.com',
        password: 'wrongpassword'
      });
    });
  });
  describe('/GET User 200', function () {
    var token;
    before(
    /*#__PURE__*/
    _asyncToGenerator(
    /*#__PURE__*/
    regeneratorRuntime.mark(function _callee2() {
      return regeneratorRuntime.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              _context2.next = 2;
              return retriveUserToken();

            case 2:
              token = _context2.sent;

            case 3:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2);
    })));
    after(function () {
      deleteAllUsersRequest('keyadmin123', 200);
    });
    it('It should get a user by token', function () {
      userGetRequest(200, token);
    });
  });
  describe('/GET User 403', function () {
    it('It should not get a user by token', function () {
      userGetRequest(403, 'wrongtoken');
    });
  });
  describe('/PATCH User 200', function () {
    after(function () {
      deleteAllUsersRequest('keyadmin123', 200);
    });
    it('It should update a user by token',
    /*#__PURE__*/
    _asyncToGenerator(
    /*#__PURE__*/
    regeneratorRuntime.mark(function _callee3() {
      var token;
      return regeneratorRuntime.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              _context3.next = 2;
              return retriveUserToken();

            case 2:
              token = _context3.sent;
              userPatchRequest(200, token, {
                name: 'newTestName'
              });

            case 4:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3);
    })));
  });
  describe('/GET User 403', function () {
    it('It should not update a user by token', function () {
      userPatchRequest(403, 'wrongtoken', {
        name: 'newTestName'
      });
    });
  });
  describe('/DELETE User 200', function () {
    after(function () {
      deleteAllUsersRequest('keyadmin123', 200);
    });
    it('It should update a user by token',
    /*#__PURE__*/
    _asyncToGenerator(
    /*#__PURE__*/
    regeneratorRuntime.mark(function _callee4() {
      var token;
      return regeneratorRuntime.wrap(function _callee4$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              _context4.next = 2;
              return retriveUserToken();

            case 2:
              token = _context4.sent;
              userDeleteRequest(200, token);

            case 4:
            case "end":
              return _context4.stop();
          }
        }
      }, _callee4);
    })));
  });
  describe('/DELETE User 403', function () {
    it('It should not update a user by token', function () {
      userDeleteRequest(403, 'wrongtoken');
    });
  });
});