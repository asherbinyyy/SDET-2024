{
  "stats": {
    "suites": 1,
    "tests": 9,
    "passes": 7,
    "pending": 0,
    "failures": 2,
    "start": "2024-01-15T10:09:46.627Z",
    "end": "2024-01-15T10:09:46.839Z",
    "duration": 212,
    "testsRegistered": 9,
    "passPercent": 77.77777777777779,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "9b102486-ea6d-49a8-b11f-6ec548f2b015",
      "title": "",
      "fullFile": "C:\\Users\\Ahmed.El-Sherbini\\Desktop\\New folder\\API\\tests\\API.test.js",
      "file": "\\tests\\API.test.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "4e533fea-687d-4b14-b243-8472996e6525",
          "title": "Test Auth API",
          "fullFile": "C:\\Users\\Ahmed.El-Sherbini\\Desktop\\New folder\\API\\tests\\API.test.js",
          "file": "\\tests\\API.test.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Test Auth API\"",
              "fullTitle": "Test Auth API \"before each\" hook in \"Test Auth API\"",
              "timedOut": false,
              "duration": 3,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "if (\n  this.currentTest.title === \"Creates new user successfully\" ||\n  this.currentTest.title ===\n    \"Fails registeration if body doesn't contain email\"\n) {\n  // Skip user creation for a specific test\n  console.log(\"Skipping user creation for Specific Test Case\");\n  return;\n}\nawait request(address).post(\"/api/v1/users\").send(registerBody);",
              "err": {},
              "uuid": "6328f1ec-b506-47f4-b1a4-a99abdbda171",
              "parentUUID": "4e533fea-687d-4b14-b243-8472996e6525",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"Test Auth API\"",
              "fullTitle": "Test Auth API \"after each\" hook in \"Test Auth API\"",
              "timedOut": false,
              "duration": 5,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await request(address)\n  .delete(\"/api/v1/all-users\")\n  .send({ key_admin: \"keyadmin123\" });\nexpect(response.status).equal(200);\nexpect(response.body).to.have.property(\"message\");\nexpect(response.body.message).equal(\"Users deleted with success\");",
              "err": {},
              "uuid": "2872dcf5-0920-422b-ba2f-ad97ab270932",
              "parentUUID": "4e533fea-687d-4b14-b243-8472996e6525",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "Creates new user successfully",
              "fullTitle": "Test Auth API Creates new user successfully",
              "timedOut": false,
              "duration": 69,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await request(address)\n  .post(\"/api/v1/users\")\n  .send(registerBody);\nexpect(response.status).equal(200);\nexpect(response.body).to.have.property(\"message\");\nexpect(response.body.message).equal(\"User registered with success\");\n// expect(response.body).to.have.property(\"token\");",
              "err": {},
              "uuid": "a03592f6-3565-4a2f-affe-690dc0f96491",
              "parentUUID": "4e533fea-687d-4b14-b243-8472996e6525",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Returns token after creation",
              "fullTitle": "Test Auth API Returns token after creation",
              "timedOut": false,
              "duration": 4,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const response = await request(address)\n  .post(\"/api/v1/users\")\n  .send(registerBody);\nexpect(response.status).equal(200);\nexpect(response.body).to.have.property(\"message\");\nexpect(response.body.message).equal(\"User registered with success\");\nexpect(response.body).to.have.property(\"token\");",
              "err": {
                "message": "AssertionError: expected 401 to equal 200",
                "estack": "AssertionError: expected 401 to equal 200\n    at Context.<anonymous> (file:///C:/Users/Ahmed.El-Sherbini/Desktop/New%20folder/API/tests/API.test.js:49:29)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- 401\n+ 200\n"
              },
              "uuid": "ff9d9326-7b6f-4e73-b491-aea9cbc0a598",
              "parentUUID": "4e533fea-687d-4b14-b243-8472996e6525",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Logins successfully",
              "fullTitle": "Test Auth API Logins successfully",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await request(address)\n  .post(\"/api/v1/auth\")\n  .send(loginBody);\nexpect(response.status).equal(200);\nexpect(response.body).to.have.property(\"token\");",
              "err": {},
              "uuid": "e07451ef-4799-4c1d-8665-31f0024b5f6a",
              "parentUUID": "4e533fea-687d-4b14-b243-8472996e6525",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Deletes user Successfully",
              "fullTitle": "Test Auth API Deletes user Successfully",
              "timedOut": false,
              "duration": 13,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const token = await loginUser(loginBody);\nconst response = await request(address)\n  .delete(\"/api/v1/users\")\n  .set(\"Authorization\", token);\nexpect(response.status).equal(200);\nexpect(response.body).to.have.property(\"message\");\nexpect(response.body.message).equal(\"User deleted with success!\");\nconst responseLogin = await request(address)\n  .post(\"/api/v1/auth\")\n  .send(loginBody);\nexpect(responseLogin.status).equal(401);",
              "err": {},
              "uuid": "6627cac7-874f-41a2-80fd-b4993de273ec",
              "parentUUID": "4e533fea-687d-4b14-b243-8472996e6525",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Gets user's data by token",
              "fullTitle": "Test Auth API Gets user's data by token",
              "timedOut": false,
              "duration": 6,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const token = await loginUser(loginBody);\nconst response = await request(address)\n  .get(\"/api/v1/users\")\n  .set(\"Authorization\", token);\nexpect(response.status).equal(200);\nexpect(response.body).to.have.property(\"id\");\nexpect(response.body).to.have.property(\"name\");\nexpect(response.body).to.have.property(\"email\");\nexpect(response.body.email).equal(loginBody.email);\nexpect(response.body).to.have.property(\"password\");\nexpect(response.body.password).equal(loginBody.password);\nexpect(response.body).to.have.property(\"imageUrl\");",
              "err": {},
              "uuid": "d759cb66-06a6-4f17-876c-cfa6848e99e8",
              "parentUUID": "4e533fea-687d-4b14-b243-8472996e6525",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Patches user's data",
              "fullTitle": "Test Auth API Patches user's data",
              "timedOut": false,
              "duration": 13,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var token = await loginUser(loginBody);\nconst response = await request(address)\n  .patch(\"/api/v1/users\")\n  .set(\"Authorization\", token)\n  .send(newDataForPatch);\nexpect(response.status).equal(200);\nexpect(response.body).to.have.property(\"message\");\nexpect(response.body.message).equal(\"User updated with success!\");\ntoken = await loginUser(newDataLogin);\nconst responsePatch = await request(address)\n  .get(\"/api/v1/users\")\n  .set(\"Authorization\", token);\nexpect(responsePatch.status).equal(200);\nexpect(responsePatch.body).to.have.property(\"id\");\nexpect(responsePatch.body).to.have.property(\"name\");\nexpect(responsePatch.body).to.have.property(\"email\");\nexpect(responsePatch.body.email).equal(newDataForPatch.email);\nexpect(responsePatch.body).to.have.property(\"password\");\nexpect(responsePatch.body.password).equal(newDataForPatch.password);\nexpect(responsePatch.body).to.have.property(\"imageUrl\");",
              "err": {},
              "uuid": "b7131af4-ff4e-477b-a8be-cdcf8ba0b92b",
              "parentUUID": "4e533fea-687d-4b14-b243-8472996e6525",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Creates new user with already existing email",
              "fullTitle": "Test Auth API Creates new user with already existing email",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//The before each hook already created the user, so we will use the same credentials\nconst response = await request(address)\n  .post(\"/api/v1/users\")\n  .send(registerBody);\nexpect(response.status).equal(401);\nexpect(response.body).to.have.property(\"message\");\nexpect(response.body.message).equal(\"User already registered\");",
              "err": {},
              "uuid": "8e51fe4a-9c72-440e-a34f-6d64e5d1e6d8",
              "parentUUID": "4e533fea-687d-4b14-b243-8472996e6525",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Fails registeration if body doesn't contain email",
              "fullTitle": "Test Auth API Fails registeration if body doesn't contain email",
              "timedOut": false,
              "duration": 4,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const response = await request(address)\n  .post(\"/api/v1/users\")\n  .send(invalidRegisterBody);\nexpect(response.status).equal(401);\nexpect(response.body).to.have.property(\"message\");\nexpect(response.body.message).not.equal(\"User registered with success\");",
              "err": {
                "message": "AssertionError: expected 200 to equal 401",
                "estack": "AssertionError: expected 200 to equal 401\n    at Context.<anonymous> (file:///C:/Users/Ahmed.El-Sherbini/Desktop/New%20folder/API/tests/API.test.js:138:29)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- 200\n+ 401\n"
              },
              "uuid": "e89b79ba-c2f2-439c-92d9-4499d02cdaab",
              "parentUUID": "4e533fea-687d-4b14-b243-8472996e6525",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Gets user with empty/token field",
              "fullTitle": "Test Auth API Gets user with empty/token field",
              "timedOut": false,
              "duration": 4,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const response = await request(address)\n  .get(\"/api/v1/users\")\n  .set(\"Authorization\", \"\");\nexpect(response.status).equal(403);\nexpect(response.body).to.have.property(\"message\");\nexpect(response.body.message).equal(\"Unauthorized\");",
              "err": {},
              "uuid": "61f3576c-86cd-4879-8ed4-6f91d744a9ee",
              "parentUUID": "4e533fea-687d-4b14-b243-8472996e6525",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "a03592f6-3565-4a2f-affe-690dc0f96491",
            "e07451ef-4799-4c1d-8665-31f0024b5f6a",
            "6627cac7-874f-41a2-80fd-b4993de273ec",
            "d759cb66-06a6-4f17-876c-cfa6848e99e8",
            "b7131af4-ff4e-477b-a8be-cdcf8ba0b92b",
            "8e51fe4a-9c72-440e-a34f-6d64e5d1e6d8",
            "61f3576c-86cd-4879-8ed4-6f91d744a9ee"
          ],
          "failures": [
            "ff9d9326-7b6f-4e73-b491-aea9cbc0a598",
            "e89b79ba-c2f2-439c-92d9-4499d02cdaab"
          ],
          "pending": [],
          "skipped": [],
          "duration": 121,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}